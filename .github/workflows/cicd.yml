name: Build and push image and deploy to aks

on:
  push:
    branches:
      - 'feature/**'
      - master
  pull_request:
    branches:
      - master

env:
  PUSH_AND_DEPLOY: ${{ github.event_name != 'pull_request' && github.ref_name == 'master' }}
  CR_REPO: zgw/klantportaal

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 'Check build and deploy var'
        run: echo Check variable $PUSH_AND_DEPLOY

      - name: 'Checkout repo'
        uses: actions/checkout@main

      - name: 'Docker meta'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.CR_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha

      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v1

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@master

      - name: 'Login to acr'
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: 'Build and push deps image'
        uses: docker/build-push-action@v2
        with:
          target: deps
          push: ${{ env.PUSH_AND_DEPLOY }}
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.CR_REPO }}:deps
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Build and push deps image'
        uses: docker/build-push-action@v2
        with:
          target: build
          push: ${{ env.PUSH_AND_DEPLOY }}
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.CR_REPO }}:build
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 'Run test image'
        uses: docker/build-push-action@v2
        with:
          target: test
          push: false
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.CR_REPO }}:test
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Build and push release image'
        uses: docker/build-push-action@v2
        with:
          push: ${{ env.PUSH_AND_DEPLOY }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-test:
    if: github.ref_name == 'master' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    environment: test
    steps:
      - name: 'Docker meta'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.ACR_LOGIN_SERVER }}/zgw/klantportaal
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha

      - name: 'Checkout zgw kubernetes repo'
        # if: env.PUSH_AND_DEPLOY == 'true'
        uses: actions/checkout@main
        with:
          repository: Gemeente-DenHaag/zgw-kubernetes
          path: zgw-kubernetes
          token: ${{ secrets.ZGW_REPO_PAT }}

      - name: 'Login to aks and set context'
        # if: env.PUSH_AND_DEPLOY == 'true'
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          resource-group: '${{ secrets.AKS_RG_TEST_ACC }}'
          cluster-name: '${{ secrets.AKS_CL_NAME_TEST_ACC }}'
        id: login

      - name: 'Deploy to aks'
        # if: env.PUSH_AND_DEPLOY == 'true'
        uses: Azure/k8s-deploy@v1.4
        with:
          namespace: 'dhonline-test'
          manifests: |
            zgw-kubernetes/klantportaal/test/configmap.yaml
            zgw-kubernetes/klantportaal/test/ingress.yaml
            zgw-kubernetes/klantportaal/klantportaal.yaml
          images: '${{ steps.meta.outputs.tags }}'

  publish-npm:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == 'master'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js version
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"

      - name: lerna bootstrap
        run: |
          npm install -g yarn
          npm install -g lerna
          yarn run bootstrap
      - name: build library
        run: yarn run build

      - name: lerna version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_AUTHOR_NAME: "Municipality of The Hague"
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: "Municipality of The Hague"
        run: |
          git push --set-upstream origin HEAD
          yarn run release -- --yes
      - name: lerna publish
        env:
          NPM_ACCESS_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          npm config set "//registry.npmjs.org/:_authToken" "${NPM_ACCESS_TOKEN}"
          npm config set access public
          npm run publish -- --no-verify-access --yes
          npm config delete "//registry.npmjs.org/:_authToken"
